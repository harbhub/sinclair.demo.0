{
  "name": "typescript.api",
  "version": "0.4.4",
  "description": "A compiler as a service api enabling nodejs developers to programatically resolve, compile, reflect and run typescript 0.9 source files.",
  "main": "index.js",
  "directories": {},
  "dependencies": {},
  "devDependencies": {},
  "scripts": {},
  "repository": {
    "type": "git",
    "url": "https://github.com/sinclairzx81/typescript.api.git"
  },
  "keywords": [
    "typescript",
    "compiler",
    "require"
  ],
  "author": {
    "name": "sinclair"
  },
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  ],
  "readmeFilename": "readme.md",
  "readme": "# typescript.api\r\n\r\nA compiler as a service api enabling nodejs developers to programatically resolve, compile, reflect and run typescript 0.9 source files.\r\n\r\n## install\r\n\r\n```javascript\r\nnpm install typescript.api\r\n```\r\n\r\n## compiler version\r\n\r\nTypeScript 0.9\r\n\r\n## quick start\r\n\r\n### registering typescript extension\r\n\r\nThe following will register the *.ts extension with require(). When calls to require() are made\r\nto *.ts files, any source resolution and/or compilation errors will be written out to the console\r\nby default.\r\n\r\nIf resolution or compilation errors do exist, the call to require() will return an empty object.\r\n\r\n```javascript\r\nrequire(\"typescript.api\").register();\r\n\r\nvar program = require(\"./program.ts\");\r\n```\r\n### overview\r\n\r\n* [manual compilation](#manual_compilation)\r\n* [compiler options](#options)\r\n* [declarations](#declarations)\r\n\r\n### objects\r\n\r\n* [source unit](#source_unit)\r\n* [compiled unit](#compiled_unit)\r\n\r\n### methods\r\n\r\n* [create](#create)\r\n* [resolve](#resolve)\r\n* [compile](#compile)\r\n* [check](#check)\r\n* [build](#build)\r\n* [run](#run)\r\n* [reset](#reset)\r\n* [sort](#sort)\r\n\r\n<a name=\"manual_compilation\" />\r\n### manual compilation\r\n\r\nThe following is an example of using the api to compile a source file named 'program.ts'. \r\n\r\nThe process will first resolve 'program.ts' and all its referenced sources files. The resolved \r\nsources array (resolved) are then checked prior to being sent to the compiler for compilation. Once compiled,\r\nthe compilation is checked again for problems prior to being run.\r\n\r\n```javascript\r\nvar typescript = require(\"typescript.api\");\r\n\r\n// show diagnostic errors.\r\nfunction show_diagnostics (units) {\r\n\r\n\tfor(var n in units) {\r\n\t\r\n\t\tfor(var m in units[n].diagnostics) {\r\n\t\t\r\n\t\t\tconsole.log( units[n].diagnostics[m].toString() );\r\n\t\t}\r\n\t}\r\n}\r\n\r\ntypescript.resolve(['./program.ts'], function(resolved) {\r\n\t\r\n\tif(!typescript.check(resolved)) {\r\n\t\r\n\t\tshow_diagnostics(resolved);\r\n\t}\r\n\telse {\r\n\t\t\r\n\t\ttypescript.compile(resolved, function(compiled) {\r\n\t\t\t\r\n\t\t\tif(!typescript.check(compiled)) {\r\n\t\t\t\r\n\t\t\t\tshow_diagnostics (compiled);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\t\t\t\r\n\t\t\t\ttypescript.run(compiled, null, function(context) {\r\n\t\t\t\t\r\n\t\t\t\t\t // exports are available on the context...\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n});\r\n```\r\n\r\n<a name=\"options\" />\r\n### compiler options\r\n\r\nThe following are options available on the typescript compiler.\r\n\r\n```javascript\r\nvar typescript = require(\"typescript.api\");\r\n\r\n// enables remote resolution of source files over http. false by default.\r\ntypescript.allowRemote     = false;         \r\n\r\n// the javascript language version to target. EcmaScript3 | EcmaScript5\r\ntypescript.languageVersion = \"EcmaScript5\"; \r\n\r\n// CommonJS or AMD module profiles, Synchronous | Asynchronous. Synchronous is the default.\r\ntypescript.moduleTarget    = \"Synchronous\"; \r\n```\r\n\r\n<a name=\"declarations\" />\r\n### declarations\r\n\r\nIt is important to note that the typescript.api does not automatically reference any declarations (such as lib.d.ts) for compilation. \r\nBecause of this, you will need to reference the appropriate *.d.ts required by your application for compilation. This is unlike the \r\ntsc command line compiler which will, by default reference the lib.d.ts declaration if not stated otherwise. (see --nolib option). \r\n\r\nIn the context of nodejs, the dom declarations declared in lib.d.ts are unnessasary and dramatically slow compilation times. The\r\ntypescript.api splits these declarations out to provide suitable environment declarations that you can reference in your project.\r\n\r\nThe typescript.api comes bundled with following declarations:\r\n\r\n```javascript\r\n// ecma api + html dom declarations (suitable for browser development)\r\n[node_modules]/typescript.api/decl/lib.d.ts \r\n\r\n// ecma api + node.d.ts declarations (suitable for nodejs development)\r\n[node_modules]/typescript.api/decl/node.d.ts\r\n\r\n// ecma api only.\r\n[node_modules]/typescript.api/decl/ecma.d.ts \r\n```\r\n\r\nIt is recommended that developers copy the appropriate declarations suitable for their environment into their project structure and\r\nreference them accordingly. \r\n\r\nFor other additional declarations, see https://github.com/borisyankov/DefinitelyTyped.\r\n\r\n## objects\r\n\r\n<a name=\"source_unit\" />\r\n### source unit\r\n\r\nThe typescript.api accepts source units for compilation. A source unit consists of the following properties: \r\n\r\n```javascript\r\n\r\nsourceUnit = {\r\n\tpath          : string,   // (public) the path of this source unit.\r\n\tcontent       : string,   // (public) the typescript source of this unit.\r\n\tremote        : boolean,  // (public) if this source file is loaded over http.\r\n\treferences    : Function  // (public) returns an array of references for this source unit.\r\n\tdiagnostics   : [object], // (public) compilation errors for this unit. 0 length if none.\r\n};\r\n\r\n```\r\n\r\nnote: For manually creating source units, see [create](#create)\r\n\r\nnote: For loading source units from disk. see [resolve](#resolve)\r\n\r\n<a name=\"compiled_unit\" />\r\n### compiled unit\r\n\r\nA compiled unit is the output from a [compilation](#compile). A compiled unit consists of the following properties:\r\n\r\n```javascript\r\n\r\ncompiledUnit = {\r\n\tpath          : string,   // (public) the path of this unit.\r\n\tcontent       : string,   // (public) the javascript source of this unit.\r\n\treferences    : Function  // (public) returns an array of references for this unit.\r\n\tdiagnostics   : [object], // (public) compilation errors for this unit. 0 length if none.\r\n\tast           : object,   // (public) AST for this unit.\r\n\tdeclaration   : string,   // (public) The declaration source for this unit.\r\n\tsourcemap     : string,   // (public) The sourcemap for this unit.\r\n\treflection    : object,   // (public) The units reflected members.  \r\n};\r\n\r\n```\r\n\r\n## methods\r\n\r\n<a name=\"resolve\" />\r\n### typescript.resolve (sources, callback)\r\n\r\nWill resolve source units by traversing each source files reference element. The result will be an \r\nordered (in order of dependancy) array of source units. \r\n\r\n__arguments__\r\n\r\n* sources - A filename, or a array of filenames to resolve. \r\n* callback(units) - A callback which passes the resolved source units.\r\n\r\n__example__\r\n\r\nThe following will resolve 'program.ts' and log each referenced source file to \r\nthe console.\r\n\r\n```javascript\r\nvar typescript = require(\"typescript.api\");\r\n\r\ntypescript.resolve([\"program.ts\"], function(resolved) { \r\n\r\n\tfor(var n in resolved) {\r\n\r\n\t\tconsole.log( resolved[n].path ); // the source files path\r\n\t\t\r\n\t\tconsole.log( resolved[n].content ); // the source files content (typescript)\r\n\t\t\r\n\t\tfor(var m in resolved[n].references) {\r\n\t\t\r\n\t\t\tconsole.log( resolved[n].references[m] ) // paths to referenced source files.\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n});\r\n```\r\n<a name=\"check\" />\r\n### typescript.check (units)\r\n\r\nUtility method to check if a source or compiled unit has errors.\r\n\r\n__arguments__\r\n\r\n* units   - units to be checked. \r\n* returns - true if ok. \r\n\r\n__example__\r\n\r\nThe following example will check if both a resolve() and compile() is successful.\r\n\r\n```javascript\r\nvar typescript = require(\"typescript.api\");\r\n\r\ntypescript.resolve([\"program.ts\"], function(resolved) { \r\n\r\n\tif(typescript.check (resolved)) { // check here for reference errors.\r\n\t\t\r\n\t\ttypescript.compile(resolved, function(compiled) {\r\n\t\t\r\n\t\t\tif( typescript.check (compiled) ) { // check here for syntax and type errors.\r\n\t\t\t\r\n\t\t\t\ttypescript.run(compiled, null, function(context) {\r\n\t\t\t\t\t\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n});\r\n```\r\n<a name=\"create\" />\r\n### typescript.create ( filename, code )\r\n\r\nCreates a source unit from a string. \r\n\r\n__arguments__\r\n\r\n* filename - A filename that other units may reference.\r\n* code\t   - The source code for this unit.\r\n\r\n__returns__\r\n\r\n* unit\t   - A source unit.\r\n\r\n__example__\r\n\r\nThe following will create a unit. and send to the compiler for compilation. \r\nThe compilation is then run.\r\n\r\n```javascript\r\nvar typescript = require(\"typescript.api\");\r\n\r\nvar sourceUnit = typescript.create(\"temp.ts\", \"export var message = 'hello world'\");\r\n\r\ntypescript.compile([sourceUnit], function(compiled) {\r\n\r\n\ttypescript.run(compiled, null, function(context) { \r\n\t\t\r\n\t\tconsole.log(context.message); // outputs hello world\r\n\t});\r\n\t\r\n});\r\n```\r\n<a name=\"compile\" />\r\n### typescript.compile ( units, callback )\r\n\r\nCompiles source units. \r\n\r\n__arguments__\r\n\r\n* units\t   - An array of source units. \r\n* callback - A callback that passed the compiled output.\r\n\r\n__example__\r\n\r\nThe following will first create and compile a unit, and compiled source is\r\nwritten to the console.\r\n\r\n```javascript\r\nvar typescript = require(\"typescript.api\");\r\n\r\nvar sourceUnit = typescript.create(\"temp.ts\", \"var value:number = 123;\");\r\n\r\ntypescript.compile([sourceUnit], function(compiled) {\r\n\r\n\tfor(var n in compiled) {\r\n\t\r\n\t\tconsole.log(compiled[n].content);\r\n\t}\r\n});\r\n```\r\n<a name=\"build\" />\r\n### typescript.build ( sources, callback )\r\n\r\nA quick means of building a typescript source file(s) and producing the compiled\r\nsource code as a string. \r\n\r\n__arguments__\r\n\r\n* sources  - an array of input source filenames.\r\n* callback - a callback containing errors and the compiled source code and declaration.\r\n\r\n__example__\r\n\r\nThe following will build the source file 'program.ts' and write the compiled\r\ncode and declaration output to the console.\r\n\r\n```javascript\t\r\nvar typescript = require(\"typescript.api\");\t\r\n\r\ntypescript.build_source(['program.ts'], function(errors, sourcecode, declaration) {\r\n\t\r\n\tif(errors) {\r\n\r\n\t\tfor(var n in errors) {\r\n\r\n\t\t\tconsole.log( errors[n].toString() );\r\n\t\t}\r\n\t}\r\n\telse {\r\n\t\t\r\n\t\tconsole.log(declaration);\r\n\t\t\r\n\t\tconsole.log(sourcecode);\r\n\t    \r\n\t}\r\n});\r\n```\r\n<a name=\"run\" />\r\n### typescript.run ( compiledUnits, sandbox, callback )\r\n\r\nRuns a compilation. \r\n\r\n__arguments__\r\n\r\n* compiledUnits - compiled source units.\r\n* sandbox\t    - A sandbox. pass null to inherit the current sandbox. code in executed in nodejs vm.\r\n* callback      - A callback that passes a context containing any exported variables and function.\r\n\r\n__example__\r\n\r\nThe following will first create and compile a unit, then send it off\r\nfor compilation.\r\n\r\n```javascript\t\r\nvar typescript = require(\"typescript.api\");\t\r\n\r\nvar sourceUnit = typescript.create(\"temp.ts\", \"export var value:number = 123;\");\r\n\r\ntypescript.compile([sourceUnit], function(compiled) {\r\n\r\n\ttypescript.run(compiled, null, function(context) { \r\n\t\r\n\t\tconsole.log(context.value); // outputs 123\r\n\t\t\r\n\t});\r\n});\r\n```\r\n<a name=\"reset\" />\r\n### typescript.reset ()\r\n\r\nResets the compiler. \r\n\r\n```javascript\t\r\nvar typescript = require(\"typescript.api\");\t\r\n\r\ntypescript.reset();\r\n```\r\n\r\n<a name=\"sort\" />\r\n### typescript.sort ( units )\r\n\r\nWill attempt to sort source units in order of dependency. If cyclic referencing\r\noccurs, the sort will return the units in order in which they are received.\r\n\r\n__arguments__\r\n\r\n* units - An array of source units to be sorted.\r\n* returns - the sorted units in order of dependency.\r\n\r\n__example__\r\n\r\nThe following will create a series of source units which reference each other\r\nas in the following graph. The units are first randomized and then sorted. The \r\nresulting sort will be the order of a, b, c, d, e, f. \r\n\r\n```javascript\r\n/*\r\n         [a]\r\n        /   \\\r\n      [b]   [c]\r\n     /   \\ /   \\\r\n   [d]   [e]   [f]\r\n*/\r\nfunction shuffle(o) {  \r\n    for(var j, x, i = o.length; i; j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);\r\n    return o;\r\n};\r\n\r\nvar units = [\r\n    typescript.create(\"a.ts\", \"\"),\r\n\r\n    typescript.create(\"b.ts\", \"/// <reference path='a.ts' />\"),\r\n    \r\n    typescript.create(\"c.ts\", \"/// <reference path='a.ts' />\"),\r\n    \r\n    typescript.create(\"d.ts\", \"/// <reference path='b.ts' />\"),\r\n    \r\n    typescript.create(\"e.ts\", \"/// <reference path='b.ts' />\\n/// <reference path='c.ts' />\\n\"),\r\n    \r\n    typescript.create(\"f.ts\", \"/// <reference path='c.ts' />\"),\r\n];\r\n\r\n// shuffle\r\nunits = shuffle(units);\r\n\r\n// sort\r\nunits = typescript.sort(units);\r\n\r\n// display\r\nfor (var n in units)  {\r\n\r\n    console.log(units[n].path);\r\n}\r\n```\r\n",
  "bugs": {
    "url": "https://github.com/sinclairzx81/typescript.api/issues"
  },
  "_id": "typescript.api@0.4.4",
  "_from": "typescript.api@"
}
